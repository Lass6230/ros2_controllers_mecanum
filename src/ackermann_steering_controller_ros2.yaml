ackermann_steering_controller_ros2:
  reference_timeout: {
    type: double,
    default_value: 0.0,
    description: "Timeout for controller references after which they will be reset. This is especially useful for controllers that can cause unwanted and dangerous behaviour if reference is not reset, e.g., velocity controllers. If value is 0 the reference is reset after each run.",
#    validation: {
#      gt_eq<>: 0.0,
#    }
  }

  rear_wheel_name: {
    type: string,
    default_value: "rear_wheel_joint",
    description: "Name of the rear wheel.",
    read_only: true,
    
  }

  front_steer_name: {
    type: string,
    default_value: "front_steer_joint",
    description: "Name of the front steer wheel.",
    read_only: true,
    
  }


  publish_rate: {
    type: double,
    default_value: 50.0,
    description: "In Hz. Controller state will be published at this rate.",
    read_only: true,
    
  }

  open_loop: {
    type: bool,
    default_value: false,
    description: "bool parameter decides if open oop or not (feedback).",
    read_only: false,
    
  }

  wheel_separation_multiplier: {
    type: double,
    default_value: 1.0,
    description: "Wheel separation height will be multiplied by value of the wheel_separation_h_multiplier.",
    read_only: false,
    
  }

  wheel_separation: {
    type: double,
    default_value: 0.0,
    description: "Wheel separation.",
    read_only: false,
    
  }

  wheel_radius: {
    type: double,
    default_value: 0.0,
    description: "Wheel radius.",
    read_only: false,
    
  }

  wheel_radius_multiplier: {
    type: double,
    default_value: 1.0,
    description: "Wheel radius will be multiplied by value of wheel_radius_multiplier.",
    read_only: false,
    
  }

  steer_pos_multiplier: {
    type: double,
    default_value: 1.0,
    description: "Steer pos will be multiplied by value of steer_pos_multiplier.",
    read_only: false,
    
  }

  steer_pos_multiplier: {
    type: double,
    default_value: 1.0,
    description: "Steer pos will be multiplied by value of steer_pos_multiplier.",
    read_only: false,
    
  }

  velocity_rolling_window_size: {
    type: int,
    default_value: 10,
    description: "The number of velocity samples to average together to compute the odometry twist.linear.x and twist.angular.z velocities.",
    read_only: false,
    
  }

  allow_multiple_cmd_vel_publishers: {
    type: bool,
    default_value: true,
    description: "Allow multiple cmd_vel publishers is enabled or disabled?.",
    read_only: false,
    
  }

  base_frame_id: {
    type: string,
    default_value: "base_link",
    description: "Base frame_id set to value of base_frame_id.",
    read_only: false,
    
  }

  odom_frame_id: {
    type: string,
    default_value: "odom",
    description: "Odometry frame_id set to value of odom_frame_id.",
    read_only: false,
    
  }


  enable_odom_tf: {
    type: bool,
    default_value: true,
    description: "Publishing to tf is enabled or disabled ?.",
    read_only: false,
    
  }

  twist_covariance_diagonal: {
    type: double_array,
    default_value: [0, 7, 14, 21, 28, 35],
    description: "diagonal values of twist covariance matrix.",
    read_only: false,
    
  }

  pose_covariance_diagonal: {
    type: double_array,
    default_value: [0, 7, 14, 21, 28, 35],
    description: "diagonal values of pose covariance matrix.",
    read_only: false,
    
  }








