ackermann_steering_controller_ros2:
  joints: {
    type: string_array,
    default_value: [],
    description: "Specifies joints used by the controller. If state joints parameter is defined, then only command joints are defined with this parameter.",
    read_only: true,
    validation: {
      unique<>: null,
      not_empty<>: null,
    }
  }
  state_joints: {
    type: string_array,
    default_value: [],
    description: "(optional) Specifies joints for reading states. This parameter is only relevant when state joints are different then command joint, i.e., when a following controller is used.",
    read_only: true,
    validation: {
      unique<>: null,
    }
  }
  interface_name: {
    type: string,
    default_value: "",
    description: "Name of the interface used by the controller on joints and command_joints.",
    read_only: true,
    validation: {
      not_empty<>: null,
      one_of<>: [["position", "velocity", "acceleration", "effort",]],
      forbidden_interface_name_prefix: null
    }
  }
  reference_timeout: {
    type: double,
    default_value: 0.0,
    description: "Timeout for controller references after which they will be reset. This is especially useful for controllers that can cause unwanted and dangerous behaviour if reference is not reset, e.g., velocity controllers. If value is 0 the reference is reset after each run.",
#    validation: {
#      gt_eq<>: 0.0,
#    }
  }

  rear_wheel_name: {
    type: string,
    default_value: "rear_wheel_joint",
    description: "Name of the rear wheel.",
    read_only: true,
    
  }

  front_steer_name: {
    type: string,
    default_value: "front_steer_joint",
    description: "Name of the front steer wheel.",
    read_only: true,
    
  }

  publish_rate: {
    type: double,
    default_value: "50.0",
    description: "In Hz. Controller state will be published at this rate.",
    read_only: true,
    
  }

  open_loop: {
    type: bool,
    default_value: "false",
    description: "bool parameter decides if open oop or not (feedback).",
    read_only: false,
    
  }

  wheel_separation_h_multiplier: {
    type: double,
    default_value: "1.0",
    description: "Wheel separation height will be multiplied by value of the wheel_separation_h_multiplier_.",
    read_only: false,
    
  }

  wheel_radius_multiplier: {
    type: double,
    default_value: "1.0",
    description: "Wheel radius will be multiplied by value of wheel_radius_multiplier_.",
    read_only: false,
    
  }

  steer_pos_multiplier: {
    type: double,
    default_value: "1.0",
    description: "Steer pos will be multiplied by value of steer_pos_multiplier_.",
    read_only: false,
    
  }

  steer_pos_multiplier: {
    type: double,
    default_value: "1.0",
    description: "Steer pos will be multiplied by value of steer_pos_multiplier_.",
    read_only: false,
    
  }

  velocity_rolling_window_size: {
    type: int,
    default_value: "10",
    description: "The number of velocity samples to average together to compute the odometry twist.linear.x and twist.angular.z velocities.",
    read_only: false,
    
  }

  allow_multiple_cmd_vel_publishers: {
    type: bool,
    default_value: "true",
    description: "Allow multiple cmd_vel publishers is enabled or disabled?.",
    read_only: false,
    
  }

  base_frame_id: {
    type: string,
    default_value: "base_link",
    description: "Base frame_id set to value of base_frame_id_.",
    read_only: false,
    
  }

  odom_frame_id: {
    type: string,
    default_value: "odom",
    description: "Odometry frame_id set to value of odom_frame_id_.",
    read_only: false,
    
  }

  enable_odom_tf: {
    type: bool,
    default_value: "true",
    description: "Publishing to tf is enabled or disabled ?.",
    read_only: false,
    
  }








