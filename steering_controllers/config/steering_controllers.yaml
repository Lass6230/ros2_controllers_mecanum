steering_controllers:
  reference_timeout: {
    type: double,
    default_value: 1,
    description: "Timeout for controller references after which they will be reset. This is especially useful for controllers that can cause unwanted and dangerous behaviour if reference is not reset, e.g., velocity controllers. If value is 0 the reference is reset after each run.",
#    validation: {
#      gt_eq<>: 0.0,
#    }
  }

  rear_wheels_names: {
    type: string_array,
    default_value: ["rear_wheel_joint"],
    description: "Name of rear wheels.",
    read_only: true,

  }

  front_wheels_names: {
    type: string_array,
    default_value: ["front_steer_joint"],
    description: "Names of front steer wheels.",
    read_only: true,

  }

  open_loop: {
    type: bool,
    default_value: false,
    description: "bool parameter decides if open oop or not (feedback).",
    read_only: false,

  }

  velocity_rolling_window_size: {
    type: int,
    default_value: 10,
    description: "The number of velocity samples to average together to compute the odometry twist.linear.x and twist.angular.z velocities.",
    read_only: false,

  }

  base_frame_id: {
    type: string,
    default_value: "base_link",
    description: "Base frame_id set to value of base_frame_id.",
    read_only: false,

  }

  odom_frame_id: {
    type: string,
    default_value: "odom",
    description: "Odometry frame_id set to value of odom_frame_id.",
    read_only: false,

  }


  enable_odom_tf: {
    type: bool,
    default_value: true,
    description: "Publishing to tf is enabled or disabled ?.",
    read_only: false,

  }

  twist_covariance_diagonal: {
    type: double_array,
    default_value: [0, 7, 14, 21, 28, 35],
    description: "diagonal values of twist covariance matrix.",
    read_only: false,

  }

  pose_covariance_diagonal: {
    type: double_array,
    default_value: [0, 7, 14, 21, 28, 35],
    description: "diagonal values of pose covariance matrix.",
    read_only: false,

  }

  position_feedback: {
    type: bool,
    default_value: false,
    description: "choice of feedbacktype, if position_feedback is false then HW_IF_VELOCITY is taken as interface type, if
    position_feedback is true then HW_IF_POSITION is taken as interface type",
    read_only: false,

  }

  use_stamped_vel: {
    type: bool,
    default_value: false,
    description: "choice of vel type, if use_stamped_vel is false then geometry_msgs::msg::Twist is taken as vel msg type, if
    use_stamped_vel is true then geometry_msgs::msg::TwistStamped is taken as vel msg type",
    read_only: false,

  }
